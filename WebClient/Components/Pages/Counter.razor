@page "/ClassicPusher"
@using DataModels
@using FirebaseAdmin
@using FirebaseAdmin.Auth
@using FirebaseAdmin.Messaging
@using Newtonsoft.Json
@using System.Diagnostics
@rendermode InteractiveServer
@inject FirebaseApp fireApp;
@inject ILogsDB dataBase;

<PageTitle>Counter</PageTitle>

<h1>Pushuper</h1>

<p>@Status</p>
<br />
<button class="btn btn-primary" style="width:200px; margin:5px" @onclick="GetAuth">Авторизоваться</button>
<label>@Auth</label>
<br />
<button class="btn btn-primary" style="width:200px;margin:5px" @onclick="()=>SendByToken(MessageValue, MessageCount)">Отправить push</button>
<div>
	<label>
		Сообщение push:
		<InputText @bind-Value="MessageValue" />
		<InputText @bind-Value="MessageCount" style="width:50px" />
	</label>
</div>
<br />
<label>@LastPush</label>


@code {
	private int currentCount = 0;

	protected string Auth { get; set; } = "Не ваторизовано";
	protected string LastPush { get; set; } = "";
	protected string Status { get; set; } = "";
	protected string MessageValue { get; set; }
	protected string MessageCount { get; set; }

	private void IncrementCount()
	{
		currentCount++;
	}

	private void GetAuth()
	{
		var app = fireApp;
		var defaultAuth = FirebaseAuth.GetAuth(fireApp);
		Auth = JsonConvert.SerializeObject(defaultAuth, Formatting.Indented);
	}

	async Task SendByToken(string msg, string count)
	{
		var sw = new Stopwatch();
		sw.Restart();
		int sendCount;
		if (int.TryParse(count, out sendCount) == false)
			sendCount = 1;
		var tickDate = DateTime.Now.Date.Ticks.ToString();

		Push push = dataBase.Pushes.FirstOrDefault()!;

		var msgs = Enumerable.Range(0, sendCount).Select(index =>
			new Message()
				{
					Notification = new Notification() { Title = $"Channel of  {tickDate}", Body = msg },
					Token = push.Token
				}
		);

		Status = "отпарвляем сообщение";

		var messaging = FirebaseMessaging.GetMessaging(fireApp);
		try
		{
			foreach (var message in msgs)
			{
				var response = await messaging.SendAsync(message);
				LastPush += response + Environment.NewLine;
			}
			Status = $"доставлено {sw.Elapsed}";
		}
		catch (Exception error)
		{
			Status = $"Ошибка {error.Message}";
		}
	}
}
